@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _authorRepo
@inject IBookRepository _bookRepo
@inject NavigationManager _navManager
@inject IToastService _toastService
@using System.IO;

<h1 class="card-title">Create new book</h1>
<br />
<hr />
<br />

@if (_isSuccess == false)
{
    <ErrorMessageDiv TextErrorMessage="Something went wrong with the creation of this book." />
}

<EditForm Model="_model" OnValidSubmit="CreateBook">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Book title</label>
        <InputText @bind-Value="_model.Title" class="form-control" id="title" />
    </div>

    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="_model.Isbn" class="form-control" id="isbn" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="_model.Price" class="form-control" id="price" />
    </div>

    <div class="form-group">
        <label for="price">Authors</label>
        <select @bind="_model.AuthorId" class="form-control" id="author">
            <option value="">-- Select author --</option>
            @if (_authors != null)
            {
                foreach (var author in _authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="summmary">Summary</label>
        <InputTextArea @bind-Value="_model.Summary" class="form-control" id="summary" />
    </div>

    <button class="btn btn-success" type="submit">
        <span class="oi oi-plus"></span> Create book
    </button>

    <button @onclick="BackToList" class="btn btn-outline-primary">
        <span class="oi oi-media-skip-backward"></span> Back to all books
    </button>
</EditForm>

@code {
    private Book _model = new Book();
    private IList<Author> _authors;
    private bool _isSuccess = true;

    protected override async Task OnInitializedAsync()
    {
        _authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task CreateBook()
    {
        _isSuccess = await _bookRepo.Create(Endpoints.BooksEndpoint, _model);

        if (_isSuccess)
        {
            _toastService.ShowSuccess("Your changes have been committed to the database.", "Success");
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
