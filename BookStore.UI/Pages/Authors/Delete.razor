@page "/authors/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService

<h1 class="card-title" style="color: red;">Deleting an author can not be undone. Press Delete to confirm.</h1>
<br />
<br />

@if (isFailed)
{
    <ErrorMessageDiv TextErrorMessage="Something went wrong with your deletion attempt."></ErrorMessageDiv>
}

@if (Model == null)
{
    <LoadingModelMessage LoadingMessage="Loading author details..."></LoadingModelMessage>
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First name</td>
                <td>@Model.Firstname</td>
            </tr>
            <tr>
                <td>Last name</td>
                <td>@Model.Firstname</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>

        <br />

        @if (Model.Books == null || Model.Books.Count == 0)
        {
            <div class="alert alert-dismissible alert-secondary">
                @Model.Firstname @Model.Lastname has not written any books.
            </div>
        }
        else
        {
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    @Model.Firstname @Model.Lastname's Books
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in Model.Books)
                    {
                        <li class="list-group-item">@book.Title (@book.Year) - €@book.Price</li>
                    }
                </ul>
            </div>
        }
    </div>
}

<br />

<button @onclick="DeleteAuthor" class="btn btn-danger">
    <span class="oi oi-delete"></span> Delete
</button>

<button @onclick="BackToList" class="btn btn-outline-primary">
    <span class="oi oi-media-skip-backward"></span> Back to all authors
</button>

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, int.Parse(Id));
    }

    private async Task DeleteAuthor()
    {
        bool isSuccess = await _repo.Delete(Endpoints.AuthorsEndpoint, Model.Id);

        if (isSuccess)
        {
            _toastService.ShowSuccess("Your changes have been committed to the database.", "Success");
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
